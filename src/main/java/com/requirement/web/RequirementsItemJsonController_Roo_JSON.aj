// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.requirement.web;

import com.requirement.domain.Requirement;
import com.requirement.service.api.RequirementService;
import com.requirement.web.RequirementsItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect RequirementsItemJsonController_Roo_JSON {
    
    declare @type: RequirementsItemJsonController: @RestController;
    
    declare @type: RequirementsItemJsonController: @RequestMapping(value = "/requirements/{requirement}", name = "RequirementsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RequirementService RequirementsItemJsonController.requirementService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param requirementService
     */
    @Autowired
    public RequirementsItemJsonController.new(RequirementService requirementService) {
        this.requirementService = requirementService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return RequirementService
     */
    public RequirementService RequirementsItemJsonController.getRequirementService() {
        return requirementService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param requirementService
     */
    public void RequirementsItemJsonController.setRequirementService(RequirementService requirementService) {
        this.requirementService = requirementService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Requirement
     */
    @ModelAttribute
    public Requirement RequirementsItemJsonController.getRequirement(@PathVariable("requirement") Long id) {
        Requirement requirement = requirementService.findOne(id);
        if (requirement == null) {
            throw new NotFoundException(String.format("Requirement with identifier '%s' not found",id));
        }
        return requirement;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param requirement
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> RequirementsItemJsonController.show(@ModelAttribute Requirement requirement) {
        return ResponseEntity.ok(requirement);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param requirement
     * @return UriComponents
     */
    public static UriComponents RequirementsItemJsonController.showURI(Requirement requirement) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(RequirementsItemJsonController.class).show(requirement))
            .buildAndExpand(requirement.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedRequirement
     * @param requirement
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> RequirementsItemJsonController.update(@ModelAttribute Requirement storedRequirement, @Valid @RequestBody Requirement requirement, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        requirement.setId(storedRequirement.getId());
        getRequirementService().save(requirement);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param requirement
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> RequirementsItemJsonController.delete(@ModelAttribute Requirement requirement) {
        getRequirementService().delete(requirement);
        return ResponseEntity.ok().build();
    }
    
}
